>> Bean scopes with annotations
> Scope refers to the lifecycle of a bean
> How long does the bean live?
> How many instances are created?
> How is the bean shared?

>> Deafault scope of a bean is 'singleton';

>> What is a singleton?
> Spring container creates only one instance of the bean, by default 
  > It is cached in memory

> All requests for the bean 
  > will return a SHARED reference to the SAME bean 

>> Explicitly specify Bean Scope through Annotation 

@Component
@Scope("singleton")
public class TennisCoach implements Coach {
    ...
}

>> Prototype scope example:

Prototype scope: new object for each request 

@Component
@Scope("prototype")
public class TennisCoach implements Coach{
    ...
}

>> Bean lifecycle methods/hooks
> You can add custom code during bean initialization
  > Calling custom business logic methods
  > Setting up handles to resources(db, sockets, file etc)

> You can add custom code during bean destruction
  > Calling custom business logic methods
  > Clean up handles to resources(db, sockets, files etc)

>> Development Process
1> Define your methods for init and destroy 
2> Add annotations: @PosstConstruct and @PreDestroy

>> Init: method configuration

@Component
public class TennisCoach implements Coach {

    @PosstConstruct
    public void doMyStartupStuff(){
        ...
    }
}
// Above code will execute after constructor and after injection of dependencies 

>> Destroy: method configuration

@Component
public class TennisCoach implements Coach{

    @PreDestroy
    public void doMyCleanupStuff(){...}
}
// Code will execute before bean is destroyed

